계단 오르기 문제이다. 이제 뭐가 필요하고, 어떤 식으로 식을 세우는지는 대충 감이 온다.

그래서 이제는 조건을 분석하는 것을 위주로 해보자.

1. 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다. -> 아마도 N-1, N-2 이런식으로 가겠지?
2. 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다. -> 이걸 지금 모르겠음.
3. 마지막 도착 계단은 반드시 밟아야 한다. -> dp의 마지막 값을 채워놓고 계산엔 넣지 않음. 무조건 마지막에 더해주기만 함.

그니까 내 생각은 이거다. dp[0] = 0, dp[N] = 마지막 계단 값.

조건에 따른 계산은 dp[1] ~ dp[N-1] 이 범위 내에서만 하자 이거야.

그러면 자연스럽게 반환조건은 
 
숨겨진 조건. 시작점 존재.

0 1 2 3 4 5 6

한 마디로 두 계단 전의 경우와(N-2) 와 직전 계단을 밟고(N-1)
그 이전에는 두 계단 이전의 경우(N-3)에서 연속되지 않는 위치인
N-2와 N-3에 대해서만 재귀호출을 해주어야 한다. 라고 하는데

재야의 고수 조언

동적계획법은 말 그대로 각 value에 따라 해당 값이 가질 수 있는 목적 값을 기록한다고 생각하시면 됩니다.

즉, 이 문제에서 dp[2]는 계단 2를 밟고 있을 때 조건에 부합하는 목적(각 계단을 밟을 때 합)을 생각하면 가장 큰 값을 갖는 경우는 1번 계단과 2번 계단을 밟을 때 겠죠 :)

쉽게 생각해서 dp[n] 은 n까지 밟았을 때 가질 수 있는 계단 가치의 최대합이라고 생각하시면 됩니다 :)