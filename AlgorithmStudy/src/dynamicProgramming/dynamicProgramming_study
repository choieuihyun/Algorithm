DynamicProgramming(동적 계획법)이 무엇인가?

--------------------------------------------------------------------

1. 분할 정복과 비슷하게 큰 문제를 작은 문제로 나누어 푸는 것임.

2. 그럼 다른 점이 뭐에요?
	
	- 작은 문제가 중복이 일어나는지 안일어나는지의 차이이다.
	
3. 그래서 어떻게 하는건데요?

	- 작은 문제를 한번만 풀어야 하므로 정답을 구해놓은 작은 문제를 어딘가에 메모해 놓는다.
	  그 후 똑같은 작은 문제가 나타나면 앞서 메모한 작은 문제의 결과값을 이용한다.
	  
4. 그렇다면 언제 쓰는건데요?

	- 작은 문제가 반복이 일어나는 경우.

5. 이 과정에서 메모이제이션 기법을 사용한다.

	- 작은 문제를 어딘가에 메모해 놓는것이 메모이제이션이고 이것이 핵심이 된다.
	
--------------------------------------------------------------------
	
그래서 Q9184가 재귀에 그대로 메모이제이션 적용하는 문제라 아주 이해하기 좋은 문제다.

어느 변방 재야의 알고리즘 고수가 말씀하시길 동적 계획법 문제를 풀기 위한 가장 기본 단계 3개만 알고 있으랜다.

1. 점화식 찾기 (동적계획법의 핵심은 반복되는 계산을 줄이는 것이기 때문에 대부분 점화식으로 표현이 가능하다.)
2. 점화식에서 반복되는 수식 확인하기 
3. 점화식을 재귀식으로 옮기면서 반복되는 수식은 메모리에 저장하기 (재귀 말고 반복문으로도 변환이 가능하지만, 일단은 재귀로 옮기는 연습부터 하는 것을 추천한다.)

또다른 변방 강자는 이렇게도 설명한다.

 - 문제에서 원하는 답이 들어갈 수 있도록 설정한다.
 - 각 인덱스까지의 최댓값 / 최솟값을 구한다.
 - 이를 재귀나 반복을 이용하여 dp를 도출한다.
 - 원하는 결과를 도출한다
 
--------------------------------------------------------------------
 
가장 알기 좋은 예시를 Q2579 구상에 설명해놓았다.

계단 오르기 문제인데 동적계획법과 메모이제이션에 대한 설명이 있다.

동적 프로그래밍을 하며 내가 생각하는 재귀로 알고리즘을 푸는것, 더 나아가 함수형 프로그래밍의 장점이라고 한다면 입코딩을 그대로 구현하는 것이다 라고 생각한다.

실제로 코드만 봐도 구현하는 식은 코드 내에 없고 이거 이렇게 해서 이런 구조로 진행할꺼야. 까지만 존재한다.

그렇게 생각했을 때, 동적계획법이란 각 value에 따라 해당 값이 가질 수 있는 목적 값을 기록하는 것이고

기록하는 공간이 dp[], 메모이제이션 기법이 되는것이다.

----------------------------------------------------------------------

동적계획법은 말 그대로 각 value에 따라 해당 값이 가질 수 있는 목적 값을 기록한다고 생각하면된다.

위의 생각을 바탕으로 계단 오르기 문제(Q2579)에 6을 넣었을 때로 예시를 들어보자.

각 value(6)에 따라 해당 값(6)이 가질 수 있는 목적 값(6번 계단을 밟았을 때의 최댓값)을 dp[6]에 기록하는 것.

즉, dp[6]은 6까지 밟았을 때 가질 수 있는 목적 값을 저장 해놓는 곳이고 이에 따른 점화식과 예외의 경우만 적용시키면 끝난다.

