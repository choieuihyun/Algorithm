정수 X에 사용할 수 있는 연산은 3가지.

1. X가 3으로 나누어 떨어지면, 3으로 나눈다.

2. X가 2로 나누어 떨어지면, 2로 나눈다.

3. 1을 뺀다.

정수 N이 주어졌을 때, 위의 연산 세 개를 적절히 사용해서 1을 만들어야 한다. 연산을 사용하는 횟수의 최솟값을 구해라.

생각해보자. 연산을 최소한으로 사용해서 하려면 연산을 사용하는 구성을 어떻게 해야할까?

1. 일단 1을 빼는 조건은 아무때나 가능함. 그렇다면 가장 많이 사용될 수 있는 조건이기에 조건을 가장 까탈스럽게 걸어놓아야 제일 조금 실행됨.
   제일 조금 실행시키려면 2일 때 한 번 실행시키거나, 아니면 3과 2의 배수가 아닌 경우에만 실행시키도록 조건을 걸면 되니까 if문의 최하단.
   
2. 2 3 4 6 8 9 10 12 14 15 16 18 20 21 22 24 26 27 28 30 이게 30까지의 2와 3의 배수 집합임.

3. 여기에서 없는 수를 골라내보면 5 7 11 13 17 19 23 25 29

	3-1. 아 소수 집합인줄 알았는데 25가 방해하네. 어차피 뒤에 49도 있어서 안됨.
	
4. 그러면 그냥 조건 그대로 해야되는 것 같다.

	4-1. 아 아닌데? 결국엔 어차피 다 홀수 집합이고 2로 나눴을 때 1 남잖아.
	
	4-2. 아 아니네 근데 이렇게 할려하면 10을 넣었을 때 말이 안됨.

5. 조건 그대로 했을 때 조건 1을 먼저 둘 것이냐, 조건 2를 먼저 둘 것이냐라고 생각해본다면 3으로 나눠진다면 2보다는 3으로 나누는게 더 큰 수로 나누는거고
   그러면 자연스럽게 횟수도 줄어들 테니까 3으로 나누는게 먼저인가?
   
   
6. 아니면 6의 배수, 2의 배수, 3의 배수, 1을 뺐을때의 경우로?
   
------------------------------------------------------------

예제에서 힌트를 줬었지.

10일 경우 2로 나누는게 아니라 10 -> 9 -> 3 -> 1 로 더 짧은 횟수가 있었지.

그래서 결국엔 6번의 경우로 하는게 정답이었다.

그리고 count 변수는 필요가 없지. 너가 동적 프로그래밍에 대해 이해를 제대로 못한거다.

문제에서 구하라는 최솟값은 dp[]에 저장되어 진행되었어야한다.

